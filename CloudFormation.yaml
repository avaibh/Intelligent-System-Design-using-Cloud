AWSTemplateFormatVersion: '2010-09-09'
Description: 'Automatic Spam Tagging'
Parameters:
  EndPoint:
    Description: Prediction endpoint to classify the emails as spam/ham
    Type: String

Resources:
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Path: /

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Main lambda making classfication for spam email
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 240
      Environment:
        Variables:
          SageMakerEndPoint: !Ref EndPoint
      Code:
        ZipFile: |
          import json
          import os
          import io
          import boto3
          import email
          import string
          import sys
          import numpy as np
          from hashlib import md5

          if sys.version_info < (3,):
              maketrans = string.maketrans
          else:
              maketrans = str.maketrans
              
          def vectorize_sequences(sequences, vocabulary_length):
              results = np.zeros((len(sequences), vocabulary_length))
              for i, sequence in enumerate(sequences):
                 results[i, sequence] = 1. 
              return results

          def one_hot_encode(messages, vocabulary_length):
              data = []
              for msg in messages:
                  temp = one_hot(msg, vocabulary_length)
                  data.append(temp)
              return data

          def text_to_word_sequence(text,
                                    filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                                    lower=True, split=" "):
              if lower:
                  text = text.lower()

              if sys.version_info < (3,):
                  if isinstance(text, unicode):
                      translate_map = dict((ord(c), unicode(split)) for c in filters)
                      text = text.translate(translate_map)
                  elif len(split) == 1:
                      translate_map = maketrans(filters, split * len(filters))
                      text = text.translate(translate_map)
                  else:
                      for c in filters:
                          text = text.replace(c, split)
              else:
                  translate_dict = dict((c, split) for c in filters)
                  translate_map = maketrans(translate_dict)
                  text = text.translate(translate_map)

              seq = text.split(split)
              return [i for i in seq if i]

          def one_hot(text, n,
                      filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                      lower=True,
                      split=' '):
              return hashing_trick(text, n,
                                   hash_function='md5',
                                   filters=filters,
                                   lower=lower,
                                   split=split)


          def hashing_trick(text, n,
                            hash_function=None,
                            filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                            lower=True,
                            split=' '):
              if hash_function is None:
                  hash_function = hash
              elif hash_function == 'md5':
                  hash_function = lambda w: int(md5(w.encode()).hexdigest(), 16)

              seq = text_to_word_sequence(text,
                                          filters=filters,
                                          lower=lower,
                                          split=split)
              return [int(hash_function(w) % (n - 1) + 1) for w in seq]
          
          SENDER = "va1019@nyu.edu"

          def reply(receive_date, subject, body, classfication, conf_score, recipientEmailAddress):
              client = boto3.client('ses')
              SUBJECT = "SPAM Identification"
              BODY_TEXT = ("This email was sent with Amazon SES using the AWS SDK for Python (Boto).")
              BODY_HTML = """<html>
                              <head></head>
                              <body>
                                <p>
                                  """+"We received your email sent at {} with the subject {}. \
                                  Here is a 240 character sample of the email body: {}. \
                                  The email was categorized as {} with a {}% confidence"\
                                  .format(receive_date, subject, body, classfication, conf_score)+"""
                                </p>
                              </body>
                              </html>
                          """
              CHARSET = "UTF-8"
              message = "We received your email sent at {} with the subject <i>{}<i/>. Here is a 240 character sample of the email body:\
              <b>{}</b>. The email was categorized as {} with a {}% confidence".format(receive_date, subject, body, classfication, conf_score)
              response = client.send_email(
                  Destination={
                      'ToAddresses': [
                          recipientEmailAddress
                      ],
                  },
                  Message={
                      'Body': {
                          'Html': {
                              'Charset': CHARSET,
                              'Data': BODY_HTML,
                          },
                          'Text': {
                              'Charset': CHARSET,
                              'Data': message,
                          },
                      },
                      'Subject': {
                          'Charset': CHARSET,
                          'Data': SUBJECT,
                      },
                  },
                  Source=SENDER)
              print(response)

          def handler(event, context):
              ENDPOINT = region = os.environ['SageMakerEndPoint']
              runtime = boto3.Session().client(service_name='sagemaker-runtime',region_name='us-east-1')          
              key = event['Records'][0]['s3']['object']['key']
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              s3 = boto3.resource('s3')
              obj = s3.Object(bucket_name,key)
              msg = email.message_from_bytes(obj.get()['Body'].read())
              recipientEmailAddress = msg['From']
              receive_date = msg['date']
              subject = msg['subject']
              
              if msg.is_multipart():
                  for part in msg.get_payload():
                      if part.get_content_type() == 'text/plain':
                          body = part.get_payload()
              else:
                  body = part.get_payload()
                  
              body = [body.strip()]
              
              print(recipientEmailAddress, receive_date, subject, "\n", body)
              # body = ["FreeMsg: Txt: CALL to No: 86888 & claim your reward of 3 hours talk time to use from your phone now! ubscribe6GBP/ mnth inc 3hrs 16 stop?txtStop"]
              vocabulary_length = 9013
              one_hot_test_messages = one_hot_encode(body, vocabulary_length)
              encoded_test_messages = vectorize_sequences(one_hot_test_messages, vocabulary_length)
              payload = ','.join(str(x) for x in encoded_test_messages[0].tolist())
              
              result = runtime.invoke_endpoint(EndpointName = ENDPOINT,
                                              ContentType = 'text/csv',
                                              Body = payload)
                                              
              response = json.loads(result['Body'].read().decode("utf-8"))
              print(response)
              
              if int(response['predictions'][0]['predicted_label']) == 1:
                  classfication = 'Spam'
              else:
                  classfication = 'Not Spam'
              conf_score = response['predictions'][0]['score']*100
              body =  body[0]
              
              reply(receive_date, subject, body, classfication, conf_score, recipientEmailAddress)
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }

  StoreBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      SourceAccount: !Ref 'AWS::AccountId'
      FunctionName: !Ref 'LambdaFunction'
      SourceArn: !GetAtt StoreBucket.Arn
      Principal: s3.amazonaws.com

  StoreBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaFunction

  ReceiptRule:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: 'ReceiptRuleSet'
      Rule:
        Enabled: true
        Actions:
          -S3Action:
            BucketName: !Ref StoreBucket

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StoreBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: 'ses.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref StoreBucket
                - /*

  ApplyNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: S3BucketNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBucketNotification
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource:
                  - !Sub 'arn:aws:s3:::${StoreBucket}'
                  - !Sub 'arn:aws:s3:::${StoreBucket}/*'

  ApplyBucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Apply bucket notification
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'ApplyNotificationFunctionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import boto3
          import logging
          import json
          import cfnresponse

          s3Client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def addBucketNotification(bucketName, notificationId, functionArn):
            notificationResponse = s3Client.put_bucket_notification_configuration(
              Bucket=bucketName,
              NotificationConfiguration={
                'LambdaFunctionConfigurations': [
                  {
                    'Id': notificationId,
                    'LambdaFunctionArn': functionArn,
                    'Events': [
                      's3:ObjectCreated:*'
                    ]
                  },
                ]
              }
            )
            return notificationResponse

          def create(properties, physical_id):
            bucketName = properties['S3Bucket']
            notificationId = properties['NotificationId']
            functionArn = properties['FunctionARN']
            response = addBucketNotification(bucketName, notificationId, functionArn)
            logger.info('AddBucketNotification response: %s' % json.dumps(response))
            return cfnresponse.SUCCESS, physical_id

          def update(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def handler(event, context):
            logger.info('Received event: %s' % json.dumps(event))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              logger.error('Exception: %s' % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)

  ApplyNotification:
    Type: Custom::ApplyNotification
    Properties:
      ServiceToken: !GetAtt 'ApplyBucketNotificationFunction.Arn'
      S3Bucket: !Ref 'StoreBucket'
      FunctionARN: !GetAtt 'LambdaFunction.Arn'
      NotificationId: S3ObjectCreatedEvent